plugins {
    id 'idea'
    id 'maven-publish'
    id "net.neoforged.moddev.legacyforge" version "2.0.74"
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

base {
    archivesName = "tgears"
    group = 'ho.artisan.tgears'
    version = "${mod_version}-for-create-${create_version}"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

legacyForge {
    version = "$minecraft_version-$forge_version"

    validateAccessTransformers = false
    accessTransformers.from "src/main/resources/META-INF/accesstransformer.cfg"

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }

    mods {
        tgears {
            sourceSet sourceSets.main
        }
    }

    runs {
        // applies to all the run configs below
        configureEach {
            systemProperty 'forge.logging.markers', ''
            systemProperty 'forge.logging.console.level', 'info'
            jvmArguments = ["-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition"]
            //jvmArgs("-XX:-OmitStackTraceInFastThrow") // uncomment when you get exceptions with null messages etc
            //jvmArgs '-XX:+UnlockCommercialFeatures' // uncomment for profiling

            systemProperty 'mixin.debug.export', 'true'
            systemProperty 'mixin.debug.verbose', 'true'

            programArgument '-mixin.config=tgears.mixins.json'
        }

        client {
            client()

            gameDirectory = project.file('run')
        }

        server {
            server()

            gameDirectory = project.file('run/server')
        }

        data {
            data()

            gameDirectory = project.file('run')
            systemProperty 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            systemProperty 'forge.logging.console.level', 'debug'
            programArguments.addAll("--mod", "tgears", "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources").getAbsolutePath())
        }

        gameTestServer {
            type = "gameTestServer"

            gameDirectory = project.file('run/gametest')
        }
    }
}

repositories {
    maven { url = "https://maven.createmod.net" } // Ponder, Flywheel
    maven { url = "https://maven.tterrag.com" } // Registrate
    maven { url = "https://maven.blamejared.com" } // JEI
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = "https://modmaven.dev/" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url =  'https://dvs1.progwml6.com/files/maven' }
}

dependencies {
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_version}-${create_version_number}:slim") { transitive = false }
    modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")
    modCompileOnly("dev.engine-room.flywheel:flywheel-forge-api-${flywheel_minecraft_version}:${flywheel_version}")
    modRuntimeOnly("dev.engine-room.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation("io.github.llamalad7:mixinextras-forge:0.4.1")

    modImplementation("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")
    modImplementation("slimeknights.tconstruct:TConstruct:${minecraft_version}-${tinker_version}")

    modCompileOnly("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    modCompileOnly("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    modImplementation("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    modImplementation("maven.modrinth:create-metallurgy:${metallurgy_version}")
    modImplementation("maven.modrinth:createaddition:${createaddition_version}")

    //modRuntimeOnly("maven.modrinth:create-henry:${create_henry_version}")
    //modRuntimeOnly("maven.modrinth:create-alloyed:${alloyed_version}")
    modRuntimeOnly("mekanism:Mekanism:${mekanism_version}")

    compileOnly 'org.projectlombok:lombok:1.18.28'
    compileOnly 'org.jetbrains:annotations:26.0.2'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.jetbrains:annotations:26.0.2'
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude ".cache"
    exclude "assets/tgears/lang-gen"
    exclude "assets/tgears/lang/default"
}

mixin {
    add sourceSets.main, 'tgears.refmap.json'
    config 'tgears.mixins.json'
}


jar {
    from('LICENSE') {
        rename { "${it}_${archivesBaseName}" }
    }
    manifest {
        attributes([
                "Specification-Title"     : "tgears",
                "Specification-Vendor"    : "chemiofitor",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "chemiofitor",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'tgears.mixins.json'
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
